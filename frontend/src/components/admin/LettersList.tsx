import React, { useState, useEffect } from 'react';
import {
  Container,
  Paper,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  IconButton,
  CircularProgress,
  Alert,
  Chip,
  AppBar,
  Toolbar,
} from '@mui/material';
import {
  Download,
  ArrowBack,
  Email,
} from '@mui/icons-material';
import { adminAPI } from '../../services/api';
import { useNavigate } from 'react-router-dom';

interface Letter {
  id: number;
  user_id: number;
  letter_type: string;
  status: string;
  generated_at: string;
  generated_by: number;
  pdf_path?: string;
  letter_data?: any;
}

const LettersList: React.FC = () => {
  const [letters, setLetters] = useState<Letter[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    fetchLetters();
  }, []);

  const fetchLetters = async () => {
    try {
      setLoading(true);
      const response = await adminAPI.getLetters();
      setLetters(response.data);
    } catch (error: any) {
      setError('Failed to load letters');
      console.error('Letters fetch error:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'sent':
        return 'success';
      case 'generated':
        return 'warning';
      case 'failed':
        return 'error';
      default:
        return 'default';
    }
  };

  const getLetterTypeColor = (letterType: string) => {
    switch (letterType.toLowerCase()) {
      case 'offer_letter':
        return 'primary';
      case 'appointment_letter':
        return 'secondary';
      case 'confirmation_letter':
        return 'success';
      case 'relieving_letter':
        return 'error';
      default:
        return 'default';
    }
  };

  const formatLetterType = (letterType: string) => {
    return letterType.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <IconButton
            edge="start"
            color="inherit"
            onClick={() => navigate('/admin/dashboard')}
            sx={{ mr: 2 }}
          >
            <ArrowBack />
          </IconButton>
          <Box sx={{ display: 'flex', alignItems: 'center', mr: 2 }}>
            <img 
              src="/IILM_University_Gurgaon_logo.jpg" 
              alt="IILM University Gurgaon" 
              style={{ 
                height: '40px', 
                width: 'auto',
                objectFit: 'contain',
                marginRight: '12px'
              }} 
            />
          </Box>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            IILM University - All Letters
          </Typography>
        </Toolbar>
      </AppBar>

      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        <Paper sx={{ p: 2 }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">
              Total Letters: {letters.length}
            </Typography>
            <Button
              variant="contained"
              onClick={() => navigate('/admin/dashboard')}
            >
              Back to Dashboard
            </Button>
          </Box>

          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>ID</TableCell>
                  <TableCell>User ID</TableCell>
                  <TableCell>Letter Type</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Generated At</TableCell>
                  <TableCell>Generated By</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {letters.map((letter) => (
                  <TableRow key={letter.id}>
                    <TableCell>{letter.id}</TableCell>
                    <TableCell>{letter.user_id}</TableCell>
                    <TableCell>
                      <Chip
                        label={formatLetterType(letter.letter_type)}
                        color={getLetterTypeColor(letter.letter_type) as any}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={letter.status}
                        color={getStatusColor(letter.status) as any}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      {new Date(letter.generated_at).toLocaleString()}
                    </TableCell>
                    <TableCell>{letter.generated_by}</TableCell>
                    <TableCell>
                      {letter.pdf_path && (
                        <>
                          <IconButton
                            size="small"
                            color="primary"
                            title="Download PDF"
                          >
                            <Download />
                          </IconButton>
                          <IconButton
                            size="small"
                            color="secondary"
                            title="Send Email"
                          >
                            <Email />
                          </IconButton>
                        </>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>

          {letters.length === 0 && (
            <Box textAlign="center" py={4}>
              <Typography color="textSecondary">
                No letters found
              </Typography>
            </Box>
          )}
        </Paper>
      </Container>
    </Box>
  );
};

export default LettersList;
